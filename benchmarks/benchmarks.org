#+SETUPFILE: ~/.emacs.d/org-templates/base.org
#+TITLE:       Notes about the experimental protocol 
#+DESCRIPTION: 
#+KEYWORDS:    
#+TEXT:        
#+OPTIONS: H:2 num:nil toc:2
#+LANGUAGE: en
#+HTML_HEAD:    <link rel="stylesheet" type="text/css" href="http://www.i3s.unice.fr/~malapert/css/worg.min.css" />
#+PROPERTY: exports results
* Tasks                                                            :noexport:
* Convert instances From TXT To OPL format

* AWK Script : Extract Tikz  

#+BEGIN_SRC awk :tangle toTikz.awk
BEGIN{
    tikz = 0;
    print "\\documentclass{standalone}\n\\usepackage{pgfplots}\n\\usepackage{tikz}\n\\begin{document}"
}{
    if( $0 ~ /begin{tikzpicture}/) {tikz = 1}
    if(tikz) {print $0}
    if( $0 ~  /end{tikzpicture}/ ) {tikz = 0}
}
 END {
     print "\\end{document}"
 
 }
#+END_SRC

* Extract and Compile Tikz

#+BEGIN_SRC sh
    find -name '*.o' -exec sh -c 'awk -f toTikz.awk {} > {}.tex' \;
    find -name '*.tex' -execdir latexm  resfiles <- list.files('results', pattern = '*.res', full.names=TRUE)
  results <- lapply(resfiles, function(x) read.table(x, sep='|', fill = TRUE, strip.white = TRUE, header=TRUE))
  resnames <- gsub(".res$", "", resfiles)
  resnames <- gsub("^.*/", "", resnames)
  names(results) <- resnames

  lapply(results, function(x) aggregate(x$s, by = list(x$JOBS), summary)) 
k {} \; 
    find -name '*.tex' -execdir latexmk -c {} \; 
#+END_SRC

#+RESULTS:

* Compare algorithms

Read and summarize the results files
#+BEGIN_SRC R :results silent :session apc
  ReadResults <- function(resfiles) {
    ReadFile <- function(resfile) {
      df <- read.table(resfile, sep='|', fill = TRUE, strip.white = TRUE, header=TRUE)
      df <- df[-ncol(df)]
      df$o <- df$FLOWTIME - df$DISQUALIFIED
      return(df)
    }
    ## results <- lapply(resfiles, function(x) read.table(x, sep='|', fill = TRUE, strip.white = TRUE, header=TRUE))
    results <- lapply(resfiles, ReadFile)
    resnames <- gsub(".res$", "", resfiles)
    resnames <- gsub("^.*/", "", resnames)
    names(results) <- resnames
    return(results)
  }


  SummaryResults <- function(df) {
    x <- cbind( 
      opt = df$s == "OPTIMUM", 
      feas = df$s == "OPTIMUM" | df$s == "FEASIBLE",
      time = df$WCTIME, 
      qual = df$QUALIFIED,
      flow = df$FLOWTIME
    )
    round(aggregate(x, by = list(df$JOBS), mean, na.rm = TRUE), 3)
  }

#+END_SRC


Build results data frame.
 #+BEGIN_SRC R :results silent :session apc
   MergeResults <- function(results, 
                            indBy = c("i", "JOBS", "MACHINES"),
                            indD = c("FLOWTIME", "DISQUALIFIED", "WCTIME") ) {
     ind <- c(indBy, indD)
     df <- data.frame(results[[1]][ind])
     for(i in tail(seq_along(results),-1)) {
       df <- merge(df, results[[i]][ind], by = indBy, all = TRUE)
     }
     colnames(df) <- c( 
       indBy, 
       paste( 
         rep(names(results), each = length(indD)),
         rep(indD, length(results)),
         sep = "."
       )
     )
     return(df)
   }

   
 #+END_SRC

** Read and summarize results : FLOW - QUAL
   
 #+BEGIN_SRC R :results output :session apc
   resfiles <- list.files('results/flow-qual', pattern = '*.res', full.names=TRUE)
   resultsFQ <- ReadResults(resfiles)
   lapply(resultsFQ, SummaryResults)
 #+END_SRC

 #+RESULTS:
 #+begin_example
 $modelCP1
   Group.1 opt  feas   time  qual     flow
 1      20   0 1.000 30.015 6.111  331.928
 2      30   0 0.994 30.020 4.542  765.212
 3      40   0 1.000 30.020 2.200 1527.600
 4      50   0 1.000 30.031 2.333 2155.500
 5      60   0 0.900 30.037 3.333 2784.889
 6      70   0 0.900 30.044 3.556 3575.778

 $modelIP3
   Group.1   opt feas   time  qual     flow
 1      20 0.967    1  6.434 6.111  331.794
 2      30 0.716    1 16.870 4.392  777.733
 3      40 0.867    1 11.621 2.267 1532.167
 4      50 0.567    1 19.807 2.300 2262.233
 5      60 0.057    1 30.644 2.434 3217.094
 6      70 0.051    1 31.221 2.115 4246.769

 $scheAPC
   Group.1   opt  feas   time  qual     flow
 1      20 0.653 1.000 17.248 6.024  333.820
 2      30 0.233 0.989 24.584 4.472  761.157
 3      40 0.600 1.000 20.712 2.267 1526.700
 4      50 0.100 1.000 29.307 2.200 2146.600
 5      60 0.000 0.900 30.050 2.667 2784.074
 6      70 0.000 0.911 30.067 2.622 3538.915
#+end_example

 #+BEGIN_SRC R :results output :exports results :session apc
   dfFQ <- MergeResults(resultsFQ)
   table(dfFQ[c("JOBS","MACHINES")])
 #+END_SRC

 #+RESULTS:
 :     MACHINES
 : JOBS   3   4   5
 :   20  60 120   0
 :   30 120  30  30
 :   40  30   0   0
 :   50  30   0   0
 :   60  60   0   0
 :   70  30  60   0


 Number of instances for which each algorithm is the VBS.
 #+BEGIN_SRC R :results output :session apc
   indF <- grep("FLOWTIME", colnames(dfFQ))
   indQ <- grep("QUALIFIED", colnames(dfFQ))
   x <- dfFQ[indF] - dfFQ[indQ]
   y <- x == apply(x, 1, min , na.rm = TRUE)
   x <- aggregate(y, by = list(dfFQ$JOBS), sum, na.rm = TRUE)
   x
 #+END_SRC

 #+RESULTS:
 : There were 49 warnings (use warnings() to see them)
 :   Group.1 modelCP1.FLOWTIME modelIP3.FLOWTIME scheAPC.FLOWTIME
 : 1      20               157               172              148
 : 2      30               124               123              110
 : 3      40                28                29               30
 : 4      50                22                19               23
 : 5      60                30                 5               24
 : 6      70                46                 5               39

 #+BEGIN_SRC R :results output :session apc
   y <- cbind(x[1], 100*x[-1]/ table(dfFQ$JOBS))
   round(y,1)
 #+END_SRC

 #+RESULTS:
 :   Group.1 modelCP1.FLOWTIME modelIP3.FLOWTIME scheAPC.FLOWTIME
 : 1      20              87.2              95.6             82.2
 : 2      30              68.9              68.3             61.1
 : 3      40              93.3              96.7            100.0
 : 4      50              73.3              63.3             76.7
 : 5      60              50.0               8.3             40.0
 : 6      70              51.1               5.6             43.3


** Read and summarize results : QUAL - FLOW

 #+BEGIN_SRC R :results output :session apc
   resfiles <- list.files('results/qual-flow', pattern = '*.res', full.names=TRUE)
   resultsQF <- ReadResults(resfiles)
   lapply(resultsQF, SummaryResults)
 #+END_SRC

 #+RESULTS:
 #+begin_example
 $modelCP1
   Group.1   opt  feas   time  qual     flow
 1      20 0.694 1.000 25.724 8.394  386.444
 2      30 0.511 0.994 29.639 7.927  871.128
 3      40 0.633 1.000 29.979 4.400 1639.967
 4      50 0.333 1.000 30.017 4.567 2318.967
 5      60 0.083 0.900 30.018 6.574 3040.204
 6      70 0.044 0.911 30.026 6.695 3794.402

 $modelIP3
   Group.1   opt feas   time  qual     flow
 1      20 0.544    1 17.047 7.900  381.189
 2      30 0.223    1 25.665 6.154  884.954
 3      40 0.233    1 26.159 4.133 1729.233
 4      50 0.000    1 30.091 3.133 2486.533
 5      60 0.000    1 31.450 2.509 3264.075
 6      70 0.000    1 31.779 2.167 4261.974

 $schedAPC
   Group.1   opt  feas   time  qual     flow
 1      20 0.802 1.000 15.738 8.299  389.132
 2      30 0.572 0.989 25.499 8.202  912.837
 3      40 0.867 1.000 24.795 4.800 1807.167
 4      50 0.567 1.000 30.025 5.233 2524.933
 5      60 0.200 0.900 30.029 7.185 3174.722
 6      70 0.144 0.911 30.054 7.671 4091.207
#+end_example


 Build results data frame.
 #+BEGIN_SRC R :results output :exports results :session apc
   dfQF <- MergeResults(resultsQF)
   table(dfQF[c("JOBS","MACHINES")])
 #+END_SRC



 #+RESULTS:
 :     MACHINES
 : JOBS   3   4   5
 :   20  60 120   0
 :   30 120  30  30
 :   40  30   0   0
 :   50  30   0   0
 :   60  60   0   0
 :   70  30  60   0


 Number of instances for which each algorithm is the VBS of disqualified.
 #+BEGIN_SRC R :results output :session apc
   indF <- grep("FLOWTIME", colnames(dfQF))
   indQ <- grep("QUALIFIED", colnames(dfQF))
   y <- dfQF[indQ] == apply(dfQF[indQ], 1, min , na.rm = TRUE)
   aggregate(y, by = list(dfQF$JOBS), sum, na.rm = TRUE)
 #+END_SRC

 #+RESULTS:
 : There were 49 warnings (use warnings() to see them)
 :   Group.1 modelCP1.DISQUALIFIED modelIP3.DISQUALIFIED schedAPC.DISQUALIFIED
 : 1      20                   175                   130                   164
 : 2      30                   137                    60                   175
 : 3      40                    19                    18                    30
 : 4      50                    14                     5                    30
 : 5      60                    28                     0                    50
 : 6      70                    36                     0                    71

 Number of instances for which each algorithm is the VBS for disqualified and flowtime.
 #+BEGIN_SRC R :results output :session apc
   x <- dfQF[indF] / y
   x <- x == apply(x, 1, min , na.rm = TRUE)
   x <- aggregate(x, by = list(dfQF$JOBS), sum, na.rm = TRUE) 
   x
 #+END_SRC

 #+RESULTS:
 : There were 49 warnings (use warnings() to see them)
 :   Group.1 modelCP1.FLOWTIME modelIP3.FLOWTIME schedAPC.FLOWTIME
 : 1      20               156               100               152
 : 2      30               108                43               129
 : 3      40                19                 8                29
 : 4      50                 9                 1                23
 : 5      60                21                 0                33
 : 6      70                33                 0                51

 #+BEGIN_SRC R :results output :session apc
   y <- cbind(x[1], 100*x[-1]/ table(dfQF$JOBS))
   round(y,1)
 #+END_SRC

 #+RESULTS:
 :   Group.1 modelCP1.FLOWTIME modelIP3.FLOWTIME schedAPC.FLOWTIME
 : 1      20              86.7              55.6              84.4
 : 2      30              60.0              23.9              71.7
 : 3      40              63.3              26.7              96.7
 : 4      50              30.0               3.3              76.7
 : 5      60              35.0               0.0              55.0
 : 6      70              36.7               0.0              56.7


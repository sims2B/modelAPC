// --------------------------------------------------------------------------
// IBM ILOG CP Optimizer model export file
// Effective workers: 4
// --------------------------------------------------------------------------

// ------ Constants: --------------------------------------------------------

TransitionMatrix_48 = transitionMatrix(
  matrixSize             = 2,
  compacted              = no,
  matrix = [ 0, 2,
             2, 0 ]
  // contiguous: 1
  // static:     1
);

// ------ Interval-related variables: ---------------------------------------

master_0 = intervalVar(end=0..80);
alt_1_0 = intervalVar(optional, size=2);
master_1 = intervalVar(end=0..80);
alt_1_1 = intervalVar(optional, size=2);
master_2 = intervalVar(end=0..80);
alt_1_2 = intervalVar(optional, size=2);
master_3 = intervalVar(end=0..80);
alt_1_3 = intervalVar(optional, size=2);
master_4 = intervalVar(end=0..80);
alt_1_4 = intervalVar(optional, size=2);
master_5 = intervalVar(end=0..80);
alt_0_5 = intervalVar(optional, size=10);
alt_1_5 = intervalVar(optional, size=10);
master_6 = intervalVar(end=0..80);
alt_0_6 = intervalVar(optional, size=10);
alt_1_6 = intervalVar(optional, size=10);
master_7 = intervalVar(end=0..80);
alt_0_7 = intervalVar(optional, size=10);
alt_1_7 = intervalVar(optional, size=10);
master_8 = intervalVar(end=0..80);
alt_0_8 = intervalVar(optional, size=10);
alt_1_8 = intervalVar(optional, size=10);
master_9 = intervalVar(end=0..80);
alt_0_9 = intervalVar(optional, size=10);
alt_1_9 = intervalVar(optional, size=10);
SequenceVar_47 = sequenceVar([alt_0_5, alt_0_6, alt_0_7, alt_0_8, alt_0_9], [1, 1, 1, 1, 1]);
SequenceVar_52 = sequenceVar([alt_1_0, alt_1_1, alt_1_2, alt_1_3, alt_1_4, alt_1_5, alt_1_6, alt_1_7, alt_1_8, alt_1_9], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1]);
disQ_0_1 = intervalVar(optional, size=0);
disQ_1_0 = intervalVar(optional, size=0);
disQ_1_1 = intervalVar(optional, size=0);
IntervalVar_100 = intervalVar(end=0..80, size=0);

// ------ Expressions: ------------------------------------------------------

IntervalPresence_74 = presenceOf(alt_0_5);
IntervalPresence_75 = presenceOf(alt_0_6);
IntervalExpr_76 = startOf(alt_0_6);
IntervalExpr_77 = startOf(alt_0_5);
IntervalPresence_81 = presenceOf(alt_0_7);
IntervalExpr_82 = startOf(alt_0_7);
IntervalPresence_86 = presenceOf(alt_0_8);
IntervalExpr_87 = startOf(alt_0_8);
IntervalPresence_91 = presenceOf(alt_0_9);
IntervalExpr_92 = startOf(alt_0_9);
IntervalExpr_97 = startOf(disQ_0_1);
IntervalExpr_101 = startOf(IntervalVar_100);
IntervalPresence_157 = presenceOf(alt_1_0);
IntervalPresence_158 = presenceOf(alt_1_1);
IntervalExpr_159 = startOf(alt_1_1);
IntervalExpr_160 = startOf(alt_1_0);
IntervalPresence_164 = presenceOf(alt_1_2);
IntervalExpr_165 = startOf(alt_1_2);
IntervalPresence_169 = presenceOf(alt_1_3);
IntervalExpr_170 = startOf(alt_1_3);
IntervalPresence_174 = presenceOf(alt_1_4);
IntervalExpr_175 = startOf(alt_1_4);
IntervalExpr_180 = startOf(disQ_1_0);
IntervalPresence_238 = presenceOf(alt_1_5);
IntervalPresence_239 = presenceOf(alt_1_6);
IntervalExpr_240 = startOf(alt_1_6);
IntervalExpr_241 = startOf(alt_1_5);
IntervalPresence_245 = presenceOf(alt_1_7);
IntervalExpr_246 = startOf(alt_1_7);
IntervalPresence_250 = presenceOf(alt_1_8);
IntervalExpr_251 = startOf(alt_1_8);
IntervalPresence_255 = presenceOf(alt_1_9);
IntervalExpr_256 = startOf(alt_1_9);
IntervalExpr_261 = startOf(disQ_1_1);

// ------ Objective: --------------------------------------------------------

minimizeStaticLex([sum([endOf(master_0), endOf(master_1), endOf(master_2), endOf(master_3), endOf(master_4), endOf(master_5), endOf(master_6), endOf(master_7), endOf(master_8), endOf(master_9)]), sum([sizeOf(disQ_0_1, 1) * -1, -1 * sizeOf(disQ_1_0, 1), -1 * sizeOf(disQ_1_1, 1), 3])]);

// ------ Constraints: ------------------------------------------------------

alternative(master_0, [alt_1_0]);
alternative(master_1, [alt_1_1]);
alternative(master_2, [alt_1_2]);
alternative(master_3, [alt_1_3]);
alternative(master_4, [alt_1_4]);
alternative(master_5, [alt_0_5, alt_1_5]);
alternative(master_6, [alt_0_6, alt_1_6]);
alternative(master_7, [alt_0_7, alt_1_7]);
alternative(master_8, [alt_0_8, alt_1_8]);
alternative(master_9, [alt_0_9, alt_1_9]);
noOverlap(SequenceVar_47, TransitionMatrix_48, 1);
noOverlap(SequenceVar_52, TransitionMatrix_48, 1);
startBeforeStart(alt_0_5, disQ_0_1, 31);
startBeforeStart(alt_0_6, disQ_0_1, 31);
startBeforeStart(alt_0_7, disQ_0_1, 31);
startBeforeStart(alt_0_8, disQ_0_1, 31);
startBeforeStart(alt_0_9, disQ_0_1, 31);
startBeforeStart(alt_1_0, disQ_1_0, 26);
startBeforeStart(alt_1_1, disQ_1_0, 26);
startBeforeStart(alt_1_2, disQ_1_0, 26);
startBeforeStart(alt_1_3, disQ_1_0, 26);
startBeforeStart(alt_1_4, disQ_1_0, 26);
startBeforeStart(alt_1_5, disQ_1_1, 31);
startBeforeStart(alt_1_6, disQ_1_1, 31);
startBeforeStart(alt_1_7, disQ_1_1, 31);
startBeforeStart(alt_1_8, disQ_1_1, 31);
startBeforeStart(alt_1_9, disQ_1_1, 31);
IntervalPresence_74 => (IntervalPresence_86 && IntervalExpr_87 <= 31 + IntervalExpr_77 || (IntervalPresence_75 && IntervalExpr_76 <= 31 + IntervalExpr_77 || IntervalPresence_81 && IntervalExpr_82 <= 31 + IntervalExpr_77) || (31 + IntervalExpr_77 >= IntervalExpr_101 || (IntervalPresence_91 && IntervalExpr_92 <= 31 + IntervalExpr_77 || 31 + IntervalExpr_77 == IntervalExpr_97)));
IntervalPresence_75 => (IntervalPresence_91 && IntervalExpr_92 <= 31 + IntervalExpr_76 || (IntervalPresence_81 && IntervalExpr_82 <= 31 + IntervalExpr_76 || IntervalPresence_86 && IntervalExpr_87 <= 31 + IntervalExpr_76) || (IntervalExpr_97 == 31 + IntervalExpr_76 || 31 + IntervalExpr_76 >= IntervalExpr_101));
IntervalPresence_81 => (IntervalPresence_86 && IntervalExpr_87 <= 31 + IntervalExpr_82 || IntervalPresence_91 && IntervalExpr_92 <= 31 + IntervalExpr_82 || (IntervalExpr_97 == 31 + IntervalExpr_82 || 31 + IntervalExpr_82 >= IntervalExpr_101));
IntervalPresence_86 => (31 + IntervalExpr_87 >= IntervalExpr_101 || (IntervalPresence_91 && IntervalExpr_92 <= 31 + IntervalExpr_87 || IntervalExpr_97 == 31 + IntervalExpr_87));
IntervalPresence_91 => (IntervalExpr_97 == 31 + IntervalExpr_92 || 31 + IntervalExpr_92 >= IntervalExpr_101);
IntervalPresence_157 => (IntervalPresence_169 && IntervalExpr_170 <= 26 + IntervalExpr_160 || (IntervalPresence_158 && IntervalExpr_159 <= 26 + IntervalExpr_160 || IntervalPresence_164 && IntervalExpr_165 <= 26 + IntervalExpr_160) || (26 + IntervalExpr_160 >= IntervalExpr_101 || (IntervalPresence_174 && IntervalExpr_175 <= 26 + IntervalExpr_160 || 26 + IntervalExpr_160 == IntervalExpr_180)));
IntervalPresence_158 => (IntervalPresence_174 && IntervalExpr_175 <= 26 + IntervalExpr_159 || (IntervalPresence_164 && IntervalExpr_165 <= 26 + IntervalExpr_159 || IntervalPresence_169 && IntervalExpr_170 <= 26 + IntervalExpr_159) || (IntervalExpr_180 == 26 + IntervalExpr_159 || 26 + IntervalExpr_159 >= IntervalExpr_101));
IntervalPresence_164 => (IntervalPresence_169 && IntervalExpr_170 <= 26 + IntervalExpr_165 || IntervalPresence_174 && IntervalExpr_175 <= 26 + IntervalExpr_165 || (IntervalExpr_180 == 26 + IntervalExpr_165 || 26 + IntervalExpr_165 >= IntervalExpr_101));
IntervalPresence_169 => (26 + IntervalExpr_170 >= IntervalExpr_101 || (IntervalPresence_174 && IntervalExpr_175 <= 26 + IntervalExpr_170 || IntervalExpr_180 == 26 + IntervalExpr_170));
IntervalPresence_174 => (IntervalExpr_180 == 26 + IntervalExpr_175 || 26 + IntervalExpr_175 >= IntervalExpr_101);
IntervalPresence_238 => (IntervalPresence_250 && IntervalExpr_251 <= 31 + IntervalExpr_241 || (IntervalPresence_239 && IntervalExpr_240 <= 31 + IntervalExpr_241 || IntervalPresence_245 && IntervalExpr_246 <= 31 + IntervalExpr_241) || (31 + IntervalExpr_241 >= IntervalExpr_101 || (IntervalPresence_255 && IntervalExpr_256 <= 31 + IntervalExpr_241 || 31 + IntervalExpr_241 == IntervalExpr_261)));
IntervalPresence_239 => (IntervalPresence_255 && IntervalExpr_256 <= 31 + IntervalExpr_240 || (IntervalPresence_245 && IntervalExpr_246 <= 31 + IntervalExpr_240 || IntervalPresence_250 && IntervalExpr_251 <= 31 + IntervalExpr_240) || (IntervalExpr_261 == 31 + IntervalExpr_240 || 31 + IntervalExpr_240 >= IntervalExpr_101));
IntervalPresence_245 => (IntervalPresence_250 && IntervalExpr_251 <= 31 + IntervalExpr_246 || IntervalPresence_255 && IntervalExpr_256 <= 31 + IntervalExpr_246 || (IntervalExpr_261 == 31 + IntervalExpr_246 || 31 + IntervalExpr_246 >= IntervalExpr_101));
IntervalPresence_250 => (31 + IntervalExpr_251 >= IntervalExpr_101 || (IntervalPresence_255 && IntervalExpr_256 <= 31 + IntervalExpr_251 || IntervalExpr_261 == 31 + IntervalExpr_251));
IntervalPresence_255 => (IntervalExpr_261 == 31 + IntervalExpr_256 || 31 + IntervalExpr_256 >= IntervalExpr_101);
IntervalPresence_74 && IntervalExpr_77 <= 31 || IntervalPresence_75 && IntervalExpr_76 <= 31 || (IntervalPresence_81 && IntervalExpr_82 <= 31 || IntervalPresence_86 && IntervalExpr_87 <= 31) || (IntervalExpr_101 <= 31 || (IntervalPresence_91 && IntervalExpr_92 <= 31 || presenceOf(disQ_0_1) && 31 == IntervalExpr_97));
IntervalPresence_157 && IntervalExpr_160 <= 26 || IntervalPresence_158 && IntervalExpr_159 <= 26 || (IntervalPresence_164 && IntervalExpr_165 <= 26 || IntervalPresence_169 && IntervalExpr_170 <= 26) || (IntervalExpr_101 <= 26 || (IntervalPresence_174 && IntervalExpr_175 <= 26 || presenceOf(disQ_1_0) && 26 == IntervalExpr_180));
IntervalPresence_238 && IntervalExpr_241 <= 31 || IntervalPresence_239 && IntervalExpr_240 <= 31 || (IntervalPresence_245 && IntervalExpr_246 <= 31 || IntervalPresence_250 && IntervalExpr_251 <= 31) || (IntervalExpr_101 <= 31 || (IntervalPresence_255 && IntervalExpr_256 <= 31 || presenceOf(disQ_1_1) && 31 == IntervalExpr_261));
endBeforeStart(alt_0_5, IntervalVar_100);
endBeforeStart(alt_0_6, IntervalVar_100);
endBeforeStart(alt_0_7, IntervalVar_100);
endBeforeStart(alt_0_8, IntervalVar_100);
endBeforeStart(alt_0_9, IntervalVar_100);
endBeforeStart(alt_1_0, IntervalVar_100);
endBeforeStart(alt_1_1, IntervalVar_100);
endBeforeStart(alt_1_2, IntervalVar_100);
endBeforeStart(alt_1_3, IntervalVar_100);
endBeforeStart(alt_1_4, IntervalVar_100);
endBeforeStart(alt_1_5, IntervalVar_100);
endBeforeStart(alt_1_6, IntervalVar_100);
endBeforeStart(alt_1_7, IntervalVar_100);
endBeforeStart(alt_1_8, IntervalVar_100);
endBeforeStart(alt_1_9, IntervalVar_100);
startBeforeStart(master_0, master_1);
startBeforeStart(master_1, master_2);
startBeforeStart(master_2, master_3);
startBeforeStart(master_3, master_4);
startBeforeStart(master_5, master_6);
startBeforeStart(master_6, master_7);
startBeforeStart(master_7, master_8);
startBeforeStart(master_8, master_9);

